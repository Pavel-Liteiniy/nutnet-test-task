{"version":3,"sources":["submit.js"],"names":["EMAIL_REG_EXP","SuccessHTTPStatusRange","URL","SHOW_TIME","ErrorDescription","toast","checkValidity","wrapperElement","document","querySelector","formElement","inputNameElement","inputEmailElement","inputSubjetElement","inputMessageElement","buttonElement","renderValidationHint","targetElement","_ref","isInvalid","description","position","arguments","length","undefined","nextElementSibling","classList","contains","remove","setElementValidityMarker","_ref2","insertAdjacentHTML","regExp","errorDescription","_ref3","isRequired","validation","style","minHeight","offsetHeight","setAttribute","toastContainer","add","addEventListener","evt","EMAIL","inputValidationHandler","emailValidation","_step","_iterator","_createForOfIteratorHelper","createElement","value","err","e","f","disabled","buttonTextContentPrevious","textContent","fetch","formData","method","body","JSON","stringify","data","headers","Content-type","then","response","status","pop","MAX","Error","concat","statusText","innerHTML","SUBMIT"],"mappings":"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","file":"submit.js","sourcesContent":["import { EMAIL_REG_EXP, SuccessHTTPStatusRange, URL, SHOW_TIME, ErrorDescription } from './const.js'\nimport { toast, checkValidity } from './utils.js'\n\nconst wrapperElement = document.querySelector( `.submit__wrapper` );\nconst formElement = wrapperElement.querySelector( `.submit__form` );\nconst inputNameElement = formElement.querySelector( `#submit-name` );\nconst inputEmailElement = formElement.querySelector( `#submit-email` );\nconst inputSubjetElement = formElement.querySelector( `#submit-subject` );\nconst inputMessageElement = formElement.querySelector( `#submit-message` );\nconst buttonElement = formElement.querySelector( `.submit__button` );\n\nconst renderValidationHint = ( targetElement, { isInvalid, description }, position = `afterend` ) => {\n  if ( !isInvalid && targetElement.nextElementSibling.classList.contains( `submit__validation-hint` ) ) {\n    targetElement.nextElementSibling.remove();\n    return;\n  }\n\n  if ( isInvalid && targetElement.nextElementSibling.classList.contains( `submit__validation-hint` ) ) {\n    targetElement.nextElementSibling.remove();\n    targetElement.insertAdjacentHTML( position, `<p class=\"submit__validation-hint\">${description}</p>` );\n    return;\n  }\n\n  if ( isInvalid && !targetElement.nextElementSibling.classList.contains( `submit__validation-hint` ) ) {\n    targetElement.insertAdjacentHTML( position, `<p class=\"submit__validation-hint\">${description}</p>` );\n  }\n};\n\nconst setElementValidityMarker = ( targetElement, { isInvalid } ) => {\n  if ( isInvalid ) {\n    targetElement.classList.add( `submit__input--invalid` );\n  } else {\n    targetElement.classList.remove( `submit__input--invalid` );\n  }\n};\n\nconst inputValidationHandler = ( { target: targetElement }, regExp, errorDescription, isRequired = true ) => {\n  const validation = checkValidity( targetElement, regExp, errorDescription, isRequired );\n\n  setElementValidityMarker( targetElement, validation );\n  renderValidationHint( targetElement, validation );\n};\n\nwrapperElement.style.minHeight = wrapperElement.offsetHeight + `px`;\nformElement.setAttribute( `novalidate`, true );\n\nconst toastContainer = document.createElement( `div` );\ntoastContainer.classList.add( `toast` );\ndocument.body.append( toastContainer );\n\ninputEmailElement.addEventListener( `input`, ( evt ) => {\n  inputValidationHandler( evt, EMAIL_REG_EXP, ErrorDescription.EMAIL );\n} );\n\nformElement.addEventListener( `submit`, ( evt ) => {\n  evt.preventDefault();\n\n  const emailValidation = checkValidity( inputEmailElement, EMAIL_REG_EXP, ErrorDescription.EMAIL );\n\n  if ( emailValidation.isInvalid ) {\n    setElementValidityMarker( inputEmailElement, emailValidation );\n    renderValidationHint( inputEmailElement, emailValidation );\n  }\n\n  if ( !emailValidation.isInvalid ) {\n    const formData = new FormData( evt.target );\n    const data = {};\n\n    for ( const pair of formData.entries() ) {\n      data[ pair[ 0 ] ] = [ ...pair ].pop();\n    }\n\n    inputNameElement.disabled = true;\n    inputEmailElement.disabled = true;\n    inputSubjetElement.disabled = true;\n    inputMessageElement.disabled = true;\n    buttonElement.disabled = true;\n\n    const buttonTextContentPrevious = buttonElement.textContent;\n    buttonElement.textContent = `Submitting...`;\n\n    fetch( URL, {\n      method: `POST`,\n      body: JSON.stringify( data ),\n      headers: {\n        'Content-type': `application/json; charset=UTF-8`\n      }\n    } )\n      .then( ( response ) => {\n        if (\n          response.status < SuccessHTTPStatusRange.MIN ||\n          response.status > SuccessHTTPStatusRange.MAX\n        ) {\n          throw new Error( `${response.status}: ${response.statusText}` );\n        }\n\n        wrapperElement.innerHTML = `<p class=\"submit__success\">Thank you! We will certainly write the answer!</p>`;\n      } )\n      .catch( () => {\n        toast( ErrorDescription.SUBMIT, toastContainer );\n\n        inputNameElement.disabled = false;\n        inputEmailElement.disabled = false;\n        inputSubjetElement.disabled = false;\n        inputMessageElement.disabled = false;\n        buttonElement.disabled = false;\n\n        buttonElement.textContent = buttonTextContentPrevious;\n      } );\n  }\n\n} );\n"]}