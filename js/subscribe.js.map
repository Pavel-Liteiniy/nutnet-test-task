{"version":3,"sources":["subscribe.js"],"names":["EMAIL_REG_EXP","SuccessHTTPStatusRange","URL","SHOW_TIME","ErrorDescription","toast","checkValidity","wrapperElement","document","querySelector","formElement","inputEmailElement","buttonElement","setElementValidityMarker","targetElement","_ref","isInvalid","classList","add","remove","offsetHeight","toastContainer","addEventListener","evt","emailValidation","EMAIL","minHeight","_step","_iterator","_createForOfIteratorHelper","target","s","n","done","data","pair","_toConsumableArray","pop","err","e","f","disabled","fetch","formData","method","body","JSON","stringify","headers","Content-type","then","response","status","MAX","Error","concat","statusText","innerHTML","SUBMIT"],"mappings":"8pDAASA,cAAeC,uBAAwBC,IAAKC,UAAWC,yCACvDC,MAAOC,+BAEhB,IAAMC,eAAiBC,SAASC,cAAT,iBACjBC,YAAcH,eACdI,kBAAoBD,YAAYD,cAAZ,iBACpBG,cAAgBF,YAAYD,cAAZ,mBAEhBI,yBAA2B,SAAEC,EAAFC,GAAoCA,EAAjBC,UAEhDF,EAAcG,UAAUC,IAAxB,0BAEAJ,EAAcG,UAAUE,OAAxB,2BATJZ,eAAMA,MAAiBC,UAASC,eAATW,aAASX,KAChCC,YAAMA,aAAN,cAAA,GAEA,IAAME,eAAgBF,SAAYD,cAAZC,OActBW,eAAeJ,UAAUC,IAAzB,SAZAV,SAAMK,KAAAA,OAAAA,gBAeNH,YAAYY,iBAAZ,SAAwC,SAAEC,GAdxCA,EAAKP,iBAEJ,IAFDQ,EAEOlB,cAAAK,kBAAAX,cAAAI,iBAAAqB,OASTJ,GAPGG,EAAAR,YALHH,yBAAAF,kBAAAa,GAQAjB,MAAAA,iBAAqBmB,MAAYnB,kBAIjCc,EAAAL,UAAA,CACAR,IADAmB,EAGAjB,EAAYY,GAHZM,EAAAC,2BACsBR,IAAAA,SAAtBE,EAAAO,QAK0BxB,WAN1B,IAME,IAAAsB,EAAAG,MAAAJ,EAAAC,EAAAI,KAAAC,MAAuCtB,CAAAA,IAAjCa,EAAiCb,EAAAA,MAanCuB,EAAMC,EAAM,IAAQC,mBAAKD,GAAOE,OAnBtC,MAAAC,GAAAV,EAAAW,EAAAD,GAAA,QAAAV,EAAAY,IAWInC,kBAAOD,UAAF,EACNQ,cAAA6B,UAAA,EAYC7B,cAAcK,UAAUC,IAAK,2BAT7BwB,MAAMC,IAAQ,CACdC,OAAU,OAYRC,KAAMC,KAAKC,UAAWb,GAdQc,QAAA,CAAAC,eAAA,qCAIhCC,KAAA,SAAAC,GAAyC,GACvCjB,EAAUkB,OAAUnD,uBAAYoC,KACjCc,EAAAC,OAAAnD,uBAAAoD,IAN+B,MAAA,IAAAC,MAAA,GAAAC,OAAAJ,EAAAC,OAAA,MAAAG,OAAAJ,EAAAK,aAAAjD,eAAAkD,UAAA,2DAQhC9C,MAAAA,WACAC,MAAAA,iBAAyB8C,OAAzBrC,gBAGAqB,kBAAYD,UAAA,EACVG,cADUH,UAAA,EAEVI,cAAWE,UAFD5B,OAAA","file":"subscribe.js","sourcesContent":["import { EMAIL_REG_EXP, SuccessHTTPStatusRange, URL, SHOW_TIME, ErrorDescription } from './const.js'\nimport { toast, checkValidity } from './utils.js'\n\nconst wrapperElement = document.querySelector( `.social__form` );\nconst formElement = wrapperElement;\nconst inputEmailElement = formElement.querySelector( `#social-email` );\nconst buttonElement = formElement.querySelector( `.social__button` );\n\nconst setElementValidityMarker = ( targetElement, { isInvalid } ) => {\n  if ( isInvalid ) {\n    targetElement.classList.add( `social__input--invalid` );\n  } else {\n    targetElement.classList.remove( `social__input--invalid` );\n  }\n};\n\nwrapperElement.style.minHeight = wrapperElement.offsetHeight + `px`;\nformElement.setAttribute( `novalidate`, true );\n\nconst toastContainer = document.createElement( `div` );\ntoastContainer.classList.add( `toast` );\ndocument.body.append( toastContainer );\n\nformElement.addEventListener( `submit`, ( evt ) => {\n  evt.preventDefault();\n\n  const emailValidation = checkValidity( inputEmailElement, EMAIL_REG_EXP, ErrorDescription.EMAIL );\n\n  if ( emailValidation.isInvalid ) {\n    setElementValidityMarker( inputEmailElement, emailValidation );\n\n    toast( ErrorDescription.EMAIL, toastContainer );\n  }\n\n  if ( !emailValidation.isInvalid ) {\n    const formData = new FormData( evt.target );\n    const data = {};\n\n    for ( const pair of formData.entries() ) {\n      data[ pair[ 0 ] ] = [ ...pair ].pop();\n    }\n\n    inputEmailElement.disabled = true;\n    buttonElement.disabled = true;\n    buttonElement.classList.add( 'social__button--sending' )\n\n    fetch( URL, {\n      method: `POST`,\n      body: JSON.stringify( data ),\n      headers: {\n        'Content-type': `application/json; charset=UTF-8`\n      }\n    } )\n      .then( ( response ) => {\n        if (\n          response.status < SuccessHTTPStatusRange.MIN ||\n          response.status > SuccessHTTPStatusRange.MAX\n        ) {\n          throw new Error( `${response.status}: ${response.statusText}` );\n        }\n\n        wrapperElement.innerHTML = `<p class=\"social__success\">Thanks for subscribing!</p>`;\n      } )\n      .catch( () => {\n        toast( ErrorDescription.SUBMIT, toastContainer );\n\n        inputEmailElement.disabled = false;\n        buttonElement.disabled = false;\n        buttonElement.classList.remove( 'social__button--sending' )\n      } );\n  }\n\n} );\n"]}